name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # duvet: REQ-TEST-003 - Tests implemented using standard JavaScript testing frameworks integrated into CI/CD pipeline
  # duvet: REQ-TEST-004 - All tests SHALL pass before deployment to GitHub Pages
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true  # Don't fail build on linting issues initially
      
    - name: Run tests
      run: npm test
      
    - name: Run tests with coverage
      run: npm run test:coverage
      if: matrix.node-version == '20.x'
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      continue-on-error: true
      
  # duvet: REQ-SYS-002 - System deployable to GitHub Pages using GitHub Actions for CI/CD
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    # Deploy only on pushes to main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run final tests before deployment
      run: npm test
      
    # duvet: REQ-SYS-001 - Static HTML application with no server-side dependencies
    - name: Prepare deployment files
      run: |
        # Copy src files to a deployment directory
        mkdir -p deploy
        cp -r src/* deploy/
        
        # Ensure index.html is in the root for GitHub Pages
        if [ ! -f deploy/index.html ]; then
          echo "Error: index.html not found in src directory"
          exit 1
        fi
        
        # Create a simple 404.html for better UX
        cp deploy/index.html deploy/404.html
        
        echo "Deployment files prepared successfully"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './deploy'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Validation job to test the deployed site
  validate-deployment:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Wait for deployment
      run: sleep 30
      
    - name: Test deployed site
      run: |
        # Test that the site is accessible
        SITE_URL="${{ needs.build-and-deploy.outputs.page_url || format('https://{0}.github.io/{1}', github.repository_owner, github.event.repository.name) }}"
        echo "Testing deployed site at: $SITE_URL"
        
        # Basic connectivity test
        if curl -f -s -I "$SITE_URL" > /dev/null; then
          echo "✅ Site is accessible"
        else
          echo "❌ Site is not accessible"
          exit 1
        fi
        
        # Test that JavaScript loads
        if curl -f -s "$SITE_URL" | grep -q "main.js"; then
          echo "✅ JavaScript files are referenced"
        else
          echo "⚠️ JavaScript files may not be properly referenced"
        fi
        
        # Test that CSS loads
        if curl -f -s "$SITE_URL" | grep -q "main.css"; then
          echo "✅ CSS files are referenced"
        else
          echo "⚠️ CSS files may not be properly referenced"
        fi
        
        echo "Deployment validation completed"